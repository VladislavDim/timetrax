// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  BUSINESS_OWNER
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  password            String
  firstName           String
  lastName            String
  phone               String
  role                Role         @default(CLIENT)

  acceptedTerms       Boolean      @default(false)
  acceptedTermsAt     DateTime?
  acceptedMarketing   Boolean      @default(false)
  acceptedMarketingAt DateTime?

  // Relations
  ownedBusiness       Business?    @relation(name: "UserBusiness")
  appointments        Appointment[] @relation(name: "ClientAppointments")

  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Business {
  id           String       @id @default(uuid())
  name         String
  description  String?
  phone        String?
  location     String?

  owner        User         @relation(name: "UserBusiness", fields: [ownerId], references: [id])
  ownerId      String       @unique

  services     Service[]
  appointments Appointment[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Service {
  id           String       @id @default(uuid())
  name         String
  description  String?
  duration     Int          // in minutes
  price        Float

  business     Business     @relation(fields: [businessId], references: [id])
  businessId   String

  appointments Appointment[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Appointment {
  id           String       @id @default(uuid())
  dateTime     DateTime
  status       AppointmentStatus @default(PENDING)

  client       User         @relation(name: "ClientAppointments", fields: [clientId], references: [id])
  clientId     String

  business     Business     @relation(fields: [businessId], references: [id])
  businessId   String

  service      Service      @relation(fields: [serviceId], references: [id])
  serviceId    String

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}
